#!/bin/bash

# CDF
# ---------------------------

# Change working directory to the top-most Finder window location
# From: https://github.com/mathiasbynens/dotfiles/blob/master/.functions
function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}


# CleanUp
# ---------------------------

# Recursively delete files that match a certain pattern
# (by default delete all `.DS_Store` files)
# From: https://github.com/necolas/dotfiles/blob/master/shell/functions/cleanup

cleanup() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}


# CP_P
# ---------------------------

# Copy w/ progress
# From: https://github.com/paulirish/dotfiles/blob/master/.functions
cp_p () {
    rsync -WavP --human-readable --progress $1 $2
}

# F
# ---------------------------

# find shorthand
# From: https://github.com/paulirish/dotfiles/blob/master/.functions
function f() {
    find . -name "$1" 2>&1 | grep -v 'Permission denied'
}


# FCD
# ---------------------------

# Open current directory in Finder
function fcd() { # short for `findercd`
    open -a Finder ./
}


# FS
# ---------------------------

# Determine size of a file or total size of a directory
# From: https://github.com/mathiasbynens/dotfiles/blob/master/.functions
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* *;
    fi;
}


# GCM
# ---------------------------

# Git commit with message and default prefix
gcm() {
  # Get git branch name and attempt to retrieve the JIRA card id from its prefix
  local branch_name=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
  local card_id=$(echo ${branch_name} | cut -d "-" -f 1-2)

  if [ -z "${branch_name}" ] ; then
    echo "Error! Cannot read branch name"
    exit 1
  fi

  if [ "${branch_name}" = "HEAD" ] ; then
    # https://stackoverflow.com/a/11958481
    # User is not on a branch
    exit 1
  fi

  if [ "${branch_name}" = "master" ] || [ "${branch_name}" = "develop" ] ; then
    # More care should be given to these types of branches
    exit 1
  fi

  if [ $# -eq 0 ] ; then
    echo "Commit message:"
    read commit_message
  else
    local commit_message=$@
  fi

  git commit -m "${card_id}: ${commit_message}"
}


# gitup
# ---------------------------

# Update repo and delete current branch after it has been merged

function gitup() {
    if [ -z "$1" ]; then
        print_info "Usage: gitup [parent_branch]"
        return 1;
    else
        local parent="$1";
    fi;

    if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
        local branch=$(git rev-parse --abbrev-ref HEAD);

        if [ "$branch" = "master" ]; then
            print_error "Cannot perform action on master branch, exiting...";
            return 1;
        fi
    else
        print_error "Not in a git repo, exiting...";
        return 1;
    fi

    if [ "$parent" = "$branch" ]; then
        print_error "Select a different parent branch, exiting...";
        print_info "Usage: gitup [parent_branch]"
        return 1;
    fi

    git checkout $parent && git pull && git branch -d "$branch"
}


# GZcompare
# ---------------------------

# Compare original and gzipped file size
# From: https://github.com/necolas/dotfiles/blob/master/shell/functions/gz
# Advanced version: https://github.com/alrra/dotfiles/blob/master/shell/bash_functions

gz() {
    local origsize=$(wc -c < "$1")
    local gzipsize=$(gzip -c "$1" | wc -c)
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)

    printf "orig: %d bytes\n" "$origsize"
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}


# MKD
# ---------------------------

# Create new directories and enter the first one
# From: https://github.com/alrra/dotfiles/blob/master/shell/bash_functions
# Alternative: https://github.com/mathiasbynens/dotfiles/blob/master/.functions

mkd() {
    [ -n "$*" ] && mkdir -p "$@" && cd "$@"
    #                     └─ make parent directories if needed
}


# QH
# ---------------------------

# Search history
# From: https://github.com/alrra/dotfiles/blob/master/shell/bash_functions

qh() {
    #           ┌─ enable colors for pipe
    #           │  ("--color=auto" enables colors only if
    #           │  the output is in the terminal)
    grep --color=always "$*" "$HISTFILE" |       less -RX
    # display ANSI color escape sequences in raw form ─┘│
    #       don't clear the screen after quitting less ─┘
}


# QT
# ---------------------------

# Search for text within the current directory

qt() {
    grep -ir --color=always "$*" --exclude-dir=".git" --exclude-dir="node_modules" . | less -RX
    #     │└─ search all files under each directory, recursively
    #     └─ ignore case
}


# WH
# ---------------------------

# Perform a Whois and Host lookup on a domain

wh() {
    whois $1
    host $1
    host mail.$1
}


# Misc
# ---------------------------

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
# From: https://github.com/mathiasbynens/dotfiles/blob/master/.bash_profile
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh;


# Create a Self-Signed SSL Certificate for a local dev domain
#
# Make sure SSL is enabled in Apache config (httpd.conf)
# Also make sure the reference to httpd-ssl.conf in httpd.conf is un-commented
function create-ssl-cert() {

    # Check that we're not in the wwwroot folder
    if [ ${PWD##*/} = "wwwroot" ]; then

        print_error "Run this command from the project folder, not wwwroot"
        return 1

    fi

    if [ -f "/etc/resolver/localhost" ]; then
        TLD="localhost"
    elif [ -f "/etc/resolver/test" ]; then
        TLD="test"
    else
        TLD="dev"
    fi

    ask_for_confirmation "Create SSL Certificate for ${PWD}?"
    if answer_is_yes; then

        # Set up SSL config
        cat > openssl.cnf <<-EOF
[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no
[req_distinguished_name]
CN = ${PWD##*/}.$TLD
[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = *.${PWD##*/}.$TLD
DNS.2 = ${PWD##*/}.$TLD
EOF

        # Generate Certificate
        openssl req \
            -new \
            -newkey rsa:2048 \
            -sha1 \
            -days 3650 \
            -nodes \
            -x509 \
            -keyout ssl.key \
            -out ssl.crt \
            -config openssl.cnf

        # Delete config
        rm -f openssl.cnf


        # Set up the Virtual Host
        ask_for_confirmation "Add Apache vhost entry and restart Apache?"

        if answer_is_yes; then

            # Make sure the current user owns the log files
            touch access_log
            touch error_log

            if [ "$(which httpd)" == "$(brew --prefix)/bin/httpd" ]; then
                FILE="$(brew --prefix)/etc/httpd/extra/httpd-ssl.conf"
            else
                FILE="/private/etc/apache2/extra/httpd-ssl.conf"
            fi

            cat << EOF | sudo tee -a $FILE

<VirtualHost ${PWD##*/}.$TLD:443>
    #   General setup for the virtual host
    VirtualDocumentRoot "${PWD}/wwwroot"
    ServerName ${PWD##*/}.$TLD
    ServerAlias *.${PWD##*/}.$TLD
    UseCanonicalName Off
    ErrorLog "${PWD}/error_log"
    CustomLog "${PWD}/access_log" common

    #   SSL Engine Switch:
    #   Enable/Disable SSL for this virtual host.
    SSLEngine on
    SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL

    #   Site Certificate:
    SSLCertificateFile "${PWD}/ssl.crt"

    #   Site Private Key:
    SSLCertificateKeyFile "${PWD}/ssl.key"
</VirtualHost>
EOF


            # Restart Apache
            print_info "Testing Apache Config and Restarting Apache"
            sudo apachectl configtest
            sudo apachectl restart

        fi


        # Add SSL Certificate to Keychain Access
        # This will bypass the browser CA error notification
        ask_for_confirmation "Add Certificate to Keychain Access?"

        if answer_is_yes; then

            sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ssl.crt

        fi

        print_success "Done."

    else

        print_error "Exiting..."

    fi

}
